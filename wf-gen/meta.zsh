#!/usr/bin/env zsh

setopt no_continue_on_error warn_nested_var warn_create_global no_clobber pipefail
#setopt verbose

source common.zsh

# Source branches for release automation, note that the elements are space separated
typeset -A SOURCE_BRANCHES
SOURCE_BRANCHES[tyk]='master release-2.9 release-3-lts release-3 release-3.1 release-3.2'
SOURCE_BRANCHES[tyk-analytics]='master release-2.9 release-3-lts release-3 release-3.1 release-3.2'
SOURCE_BRANCHES[tyk-pump]='master'
SOURCE_BRANCHES[tyk-pump]='master'
SOURCE_BRANCHES[tyk-sink]='master'

# Release branches for known repos, all automation will be sync'd to these branches when pushed to the corresponding SOURCE_BRANCH by sync-automation.yml
# Needs to be a comma-separated list as it it goes into a YAML array.
typeset -A RELEASE_BRANCHES
RELEASE_BRANCHES[master,tyk]='release-3.2'
RELEASE_BRANCHES[release-2.9,tyk]='release-2.9.3.2'
RELEASE_BRANCHES[release-3-lts,tyk]='release-3.0.2, release-3.0.2-update, release-3.0.3, release-3.0.4, release-3.0.5'
RELEASE_BRANCHES[release-3,tyk]='release-3.1, release-3.1.0, release-3.1.1, release-3.1.1-cloud, release-3.1.2'

RELEASE_BRANCHES[master,tyk-analytics]='release-3.2'
RELEASE_BRANCHES[release-2.9,tyk-analytics]=''
RELEASE_BRANCHES[release-3-lts,tyk-analytics]='release-3.0.2, release-3.0.3, release-3.0.4, release-3.0.5'
RELEASE_BRANCHES[release-3,tyk,tyk-analytics]='release-3.1, release-3.1.0, release-3.1.1, release-3.1.2'

RELEASE_BRANCHES[master,tyk-pump]='release-0.8, release-1.0'
RELEASE_BRANCHES[master,tyk-sink]='release-1.7, release-1.8'

function parse_options {
    # Defaults
    local o_help
    local -a o_repos=(repos $REPOS)

    zmodload zsh/zutil
    zparseopts -D -F -K -- repos:=o_repos h=o_help
    if [[ $? != 0 || -n $o_help ]]; then
	usage "could not parse options"
    fi
    typeset -g -a repos=("${(@s/,/)o_repos[2]}")
}

function usage {
    print ${1:-did not understand what you wanted}
    cat <<EOF
Usage: 

    $PROGNAME	-${o_repos}

Any omitted options will use the values above
GNU style long/short options not supported
EOF
    exit 1
}

function fetch_branch {
    local r=${1?"repo undefined for fetch"}
    local branch=${2?"branch undefined for fetch"}

    # Since the work is done in subshell, failures are not fatal
    (
	# Clean up old stale directories
	[[ -d $r ]] && rm -rf $r
	git clone git@github.com:TykTechnologies/$r --depth 1 -b $branch
    )
    return $?
}

function commit_changes {
    local r=${1?"repo undefined for commit"}
    local branch=${2?"src branch undefined for commit"}

    local c
    (
	cd $r
	print Start of diff for ${r}, comments ignored
	git diff --staged -G'(^[^#])'
	read -q "?End of diff for $r. Control-C to cancel. Any key to confirm." c
	# commit if there are changes
	git commit -m "Sync by tyk-ci/wf-gen. This commit was generated by codeÂ© and should only operate on .g/w/sync-automation.yml."
	git push origin $branch
    )
}

function process_repo_branch {
    local r=${1?"repo undefined for process"}
    local branch=${2?"src branch undefined for process"}
    local cmd
    
    local target="${r}/.github/workflows/sync-automation.yml"
    local dirpath=$(dirname $target)
    # :t is basename
    local src="${target:t}.${SOURCE_SUFFIX}"

    cmd="m4 -E -DxSRC_BRANCH='$branch' -DxRELEASE_BRANCHES='$RELEASE_BRANCHES[$branch,$r]' -DxAUTO_FILES='$TARGETS'"

    print Running: $cmd $src with output to $target
    mkdir -p $dirpath || exit 1
    eval "$cmd -DxM4_CMD_LINE=\"$cmd\" -DxPR_CMD_LINE='$PROGNAME $CMD_LINE' $src >! $target"
    (cd $r && git add .github/workflows/sync-automation.yml)
}

#
# Start here
PROGNAME=$0
CMD_LINE=$*
typeset -g -a repos
typeset -g branch base_branch body force title push_only
parse_options $*

# Split on comma for repos
for repo in $repos
do
    for src_branch in ${(z)SOURCE_BRANCHES[$repo]}
    do
	fetch_branch $repo $src_branch
	print Generating files for $repo/$src_branch
	process_repo_branch $repo $src_branch
	commit_changes $repo $src_branch
    done
done

