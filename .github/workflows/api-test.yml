name: Api Tests
on:
  workflow_call:
jobs:
  test-controller-api:
    runs-on: ubuntu-latest
    container: tykio/gromit:v1.8.1-alpha
    outputs:
      conf: ${{ steps.params.outputs.api_conf }}
      db: ${{ steps.params.outputs.api_db }}
      cache_db: ${{ steps.params.outputs.api_cache_db }}
      pump: ${{ steps.params.outputs.pump }}
      sink: ${{ steps.params.outputs.sink }}
      gd_tag: ${{ steps.params.outputs.gd_tag }}
      versions: ${{ steps.params.outputs.versions }}
      exclude: ${{ steps.params.outputs.exclude }}
    steps:
      - name: set params
        id: params
        env:
          REPO: ${{ github.repository }}
          # Cover pull_request_target too
          BASE_REF: ${{startsWith(github.event_name, 'pull_request') && github.base_ref || github.ref}}
          TAGS: ${{ needs.goreleaser.outputs.tags }}
          IS_PR: ${{startsWith(github.event_name, 'pull_request') && 'yes' }}
          IS_TAG: ${{startsWith(github.ref, 'refs/tags') && 'yes' }}
          JOB: api
        run: gromit policy controller --loglevel debug | tee -a "$GITHUB_OUTPUT"
  api-tests:
    runs-on: ubuntu-latest
    env:
      METADATA_REPORT_PATH: /tmp/metadata.toml
      XUNIT_REPORT_PATH: ${{ github.workspace }}/reports/pytest-report.xml
    permissions:
      id-token: write # This is required for requesting the Github JWT
      contents: read # This is required for actions/checkout
    strategy:
      fail-fast: false
      matrix:
        conf: ${{ fromJson(needs.test-controller-api.outputs.conf) }}
        db: ${{ fromJson(needs.test-controller-api.outputs.db) }}
        cache_db: ${{ fromJson(needs.test-controller-api.outputs.cache_db) }}
        pump: ${{ fromJson(needs.test-controller-api.outputs.pump) }}
        sink: ${{ fromJson(needs.test-controller-api.outputs.sink) }}
        include:
          - db: postgres15
            markers: "and not sql"
        exclude: ${{ fromJson(needs.test-controller-api.outputs.exclude) }}
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::754489498669:role/ecr_rw_tyk
          role-session-name: cipush
          aws-region: eu-central-1
      - id: ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
          # Only ${{ github.actor }} has access
          # See https://github.com/mxschmitt/action-tmate#use-registered-public-ssh-keys
      - name: Setup tmate session only in debug mode
        uses: mxschmitt/action-tmate@v3
        if: runner.debug == '1'
        with:
          detached: true
          limit-access-to-actor: true
      - name: fetch env from tyk-ci
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release download --repo github.com/TykTechnologies/tyk-ci -p 'ci-env.tgz' -O env.tgz
          tar xzvf env.tgz
      - name: env up
        shell: bash
        working-directory: auto
        id: env_up
        env:
          pull_policy: 'if_not_present'
          GH_TOKEN: ${{ secrets.ORG_GH_TOKEN }}
          TYK_DB_LICENSEKEY: ${{ secrets.DASH_LICENSE }}
          TYK_MDCB_LICENSE: ${{ secrets.MDCB_LICENSE }}
          ECR: ${{ steps.ecr.outputs.registry }}
          VERSIONS: ${{ needs.test-controller-api.outputs.versions }}
        run: |
          echo "ECR=${ECR}
          $VERSIONS
          tyk_pump_image=${{matrix.pump}}
          tyk_sink_image=${{matrix.sink}}
          confs_dir=./pro-ha
          env_file=local-${{ matrix.db }}.env" > versions.env
          echo "::group::versions"
          cat versions.env
          echo "::endgroup::"
          # Add Tyk component config variations to $env_file
          cat confs/${{ matrix.conf }}.env >> local-${{ matrix.db }}.env
          # bring up env, the project name is important
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f ${{ matrix.db }}.yml -f ${{ matrix.cache_db }}.yml --env-file versions.env --profile master-datacenter up --quiet-pull -d
          ./dash-bootstrap.sh http://localhost:3000
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f ${{ matrix.db }}.yml -f ${{ matrix.cache_db }}.yml --env-file versions.env --profile slave-datacenter up --quiet-pull -d
      - name: Run tests
        working-directory: auto
        id: test_execution
        run: |
          # Generate report id
          echo "id=$(date +%s%N)" >> $GITHUB_OUTPUT
          # Run tests
          set -o pipefail
          echo "### API tests ${{ matrix.db }} ${{ matrix.conf }}" >> $GITHUB_STEP_SUMMARY
          if docker run --rm --network auto_default --env-file pytest.env -v ${{ github.workspace }}/reports:/app/reports \
            ${{ steps.ecr.outputs.registry }}/tyk-automated-tests:${{ needs.test-controller-api.outputs.gd_tag }} \
            pytest -c pytest_ci.ini --junitxml=./${XUNIT_REPORT_PATH#"${{ github.workspace }}"} --ci -m "not local and not dind ${{ matrix.markers }}" | tee tests.out; then
              echo "All tests passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "::error title=API tests ${{ matrix.db }} ${{ matrix.conf }}::Test execution failed"
            cat tests.out >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
      - name: Generate metadata
        if: always() && steps.test_execution.outcome != 'skipped'
        id: metadata_report
        env:
          REPORT_NAME: ${{ github.repository }}_${{ github.run_id }}_${{ github.run_attempt }}-${{steps.test_execution.outputs.id}}
        run: |
          # Generate metadata report
          echo "[metadata]
          repo = ${{ github.repository }}
          branch = ${{ github.ref }}
          commit = ${{ github.sha }}
          test_suite_version = ${{ needs.test-controller-api.outputs.gd_tag }}
          test_suite_name = ${{ github.job }}
          test_suite_run = ${{ github.run_id }}-${{ github.run_attempt }}
          db = ${{ matrix.db }}
          conf = ${{ matrix.conf }}
          pump_compatibility = ${{ matrix.pump }}
          sink_compatibility = ${{ matrix.sink }}
          " > ${METADATA_REPORT_PATH}
          # Print metadata report
          if [[ "${{ runner.debug }}" == "1" ]]; then
            echo "::group::metadata report"
            cat ${METADATA_REPORT_PATH}
            echo "::endgroup::"
          fi
          #Upload xunit report
          aws s3 cp ${XUNIT_REPORT_PATH}  s3://assets.dev.tyk.technology/testreports/${REPORT_NAME#*/}.xml
          #Upload metadata report
          aws s3 cp ${METADATA_REPORT_PATH} s3://assets.dev.tyk.technology/testreports/${REPORT_NAME#*/}.metadata.toml
      - name: Docker logs for all components
        if: failure() && (steps.test_execution.outcome != 'success' || steps.env_up.outcome != 'success')
        working-directory: auto
        env:
          pull_policy: 'if_not_present'
          GH_TOKEN: ${{ secrets.ORG_GH_TOKEN }}
          TYK_DB_LICENSEKEY: ${{ secrets.DASH_LICENSE }}
          TYK_MDCB_LICENSE: ${{ secrets.MDCB_LICENSE }}
          ECR: ${{ steps.ecr.outputs.registry }}
          VERSIONS: ${{ needs.test-controller-api.outputs.versions }}
        run: |
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f ${{ matrix.db }}.yml -f ${{ matrix.cache_db }}.yml --env-file versions.env --profile all logs | sort > ${{ github.workspace }}/docker-compose.log
          echo "::group::DockerLogs"
          cat ${{ github.workspace }}/docker-compose.log
          echo "::endgroup::"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: failure() && (steps.test_execution.outcome != 'success' || steps.env_up.outcome != 'success')
        with:
          name: docker-compose-logs-${{ github.job }}-${{ matrix.db }}-${{ matrix.conf }}-${{ github.run_id }}
          path: ${{ github.workspace }}/docker-compose.log
          retention-days: 3
          overwrite: true
      - name: Archive Integration tests report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-report-${{ matrix.db }}-${{ matrix.conf }}-${{ github.run_id }}
          retention-days: 3
          path: ${{ github.workspace }}/reports
          overwrite: true
      - name: Fetch commit author
        if: failure() && steps.test_execution.outcome != 'success' && github.event_name == 'push'
        env:
          USER_EMAIL: ${{ needs.goreleaser.outputs.commit_author }}
        run: echo "GIT_USER_EMAIL=$USER_EMAIL" >> $GITHUB_ENV
      - name: Fetch slack user
        if: failure() && steps.test_execution.outcome != 'success' && github.event_name == 'push'
        id: fetch_slack_user
        uses: TykTechnologies/github-actions/.github/actions/github-to-slack@main
        with:
          github_email: ${{ env.GIT_USER_EMAIL }}
      - name: Notify slack
        if: failure() && steps.test_execution.outcome != 'success' && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.API_TEST_ALERT_SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "Result: ${{ steps.test_execution.outcome }}"
          SLACK_USERNAME: API INTEGRATION TESTS
          SLACK_MESSAGE: "*Test*: ${{ matrix.db }}-${{ matrix.conf }}, *Author*: ${{ steps.fetch_slack_user.outputs.slack-user-name }}"
          SLACK_FOOTER: "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|SEE EXECUTION DETAILS HERE>"
