name: TestÂ²
on:
  workflow_dispatch:
  workflow_call:
  pull_request:
    paths:
  push:
    branches:
      - master
      - release-*
    paths:
jobs:
  test-controller-api:
    runs-on: ubuntu-latest
    outputs:
      envfiles: ${{ steps.params.outputs.envfiles }}
      pump: ${{ steps.params.outputs.pump }}
      sink: ${{ steps.params.outputs.sink }}
    steps:
      - name: set params
        id: params
        shell: bash
        env:
          # startsWith covers pull_request_target too
          BASE_REF: ${{startsWith(github.event_name, 'pull_request') && github.base_ref || github.ref_name}}
          VARIATION: test
        run: |
          set -eo pipefail
          curl -s --retry 5 --retry-delay 10 --fail-with-body "http://tui.internal.dev.tyk.technology/v2/$VARIATION/tyk-ci/$BASE_REF/${{ github.event_name}}/api.gho" | tee -a "$GITHUB_OUTPUT"
          [[ $VARIATION =~ test ]] && echo "::warning file=release.yml,line=100,col=5,endColumn=7::Using test variation"
  api-tests:
    needs:
      - test-controller-api
    runs-on: ubuntu-latest
    env:
      XUNIT_REPORT_PATH: ${{ github.workspace }}/reports/pytest-report.xml
    permissions:
      id-token: write # This is required for requesting the Github JWT
      contents: read # This is required for actions/checkout
    strategy:
      fail-fast: false
      matrix:
        envfiles: ${{ fromJson(needs.test-controller-api.outputs.envfiles) }}
        pump: ${{ fromJson(needs.test-controller-api.outputs.pump) }}
        sink: ${{ fromJson(needs.test-controller-api.outputs.sink) }}
        exclude:
          - pump: tykio/tyk-pump-docker-pub:v1.8
            sink: $ECR/tyk-sink:master
          - pump: $ECR/tyk-pump:master
            sink: tykio/tyk-mdcb-docker:v2.4
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::754489498669:role/ecr_rw_tyk
          role-session-name: cipush
          aws-region: eu-central-1
      - id: ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
      - name: Setup tmate session only in debug mode
        uses: mxschmitt/action-tmate@v3
        if: runner.debug == '1'
        with:
          detached: true
          limit-access-to-actor: true
          # Only ${{ github.actor }} has access
          # See https://github.com/mxschmitt/action-tmate#use-registered-public-ssh-keys
      - name: fetch env from tyk-ci
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release download --repo github.com/TykLabs/tyk-pro -p 'auto-env.tgz' -O env.tgz
          mkdir auto
          tar xzvf env.tgz -C auto
      - name: env up
        shell: bash
        working-directory: auto
        id: env_up
        env:
          pull_policy: 'if_not_present'
          GH_TOKEN: ${{ secrets.ORG_GH_TOKEN }}
          TYK_DB_LICENSEKEY: ${{ secrets.DASH_LICENSE }}
          TYK_MDCB_LICENSE: ${{ secrets.MDCB_LICENSE }}
          BASE_REF: ${{startsWith(github.event_name, 'pull_request') && github.base_ref || github.ref_name}}
        run: "match_tag=${{steps.ecr.outputs.registry}}/tyk-ci:$BASE_REF\ntags=($match_tag)\ndocker run -q --rm -v ~/.docker/config.json:/root/.docker/config.json tykio/gromit policy match ${tags[0]} ${match_tag} 2>versions.env\necho '# alfa and beta have to come after the override\ntyk_alfa_image=$tyk_image\ntyk_beta_image=$tyk_image\nECR=${{steps.ecr.outputs.registry}}\ntyk_pump_image=${{matrix.pump}}\ntyk_sink_image=${{matrix.sink}}\nconfs_dir=./pro-ha\nenv_file=local-${{ matrix.envfiles.db }}.env' >> versions.env\necho \"::group::versions\"\ncat versions.env\necho \"::endgroup::\"\n# Add Tyk component config variations to $env_file\ncat confs/${{ matrix.envfiles.config }}.env >> local-${{ matrix.envfiles.db }}.env\n# bring up env, the project name is important\ndocker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f ${{ matrix.envfiles.db }}.yml -f ${{ matrix.envfiles.cache }}.yml --env-file versions.env --profile master-datacenter up --quiet-pull -d\n./dash-bootstrap.sh http://localhost:3000\ndocker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f ${{ matrix.envfiles.db }}.yml -f ${{ matrix.envfiles.cache }}.yml --env-file versions.env --profile slave-datacenter up --quiet-pull -d \n"
      - name: Run API tests
        id: test_execution
        env:
          # Cover pull_request_target too
          BASE_REF: ${{startsWith(github.event_name, 'pull_request') && github.base_ref || github.ref_name }}
        run: "# Generate report id\necho \"id=$(date +%s%N)\" >> $GITHUB_OUTPUT\ncommon_cmd=\"\"\ncmd=\"docker run --rm --network auto_default --env-file pytest.env -v ${{ github.workspace }}/reports:/app/reports\n  ${{ steps.ecr.outputs.registry }}/tyk-automated-tests:$BASE_REF\n  pytest -c pytest_ci.ini --junitxml=./${XUNIT_REPORT_PATH --ci -m ${{ matrix.envfiles.apimarkers }} | tee tests.out\"      \n# Run tests\nset -o pipefail\necho \"### API tests ${{ matrix.envfiles.db }} ${{ matrix.envfiles.conf }}\" >> $GITHUB_STEP_SUMMARY\nif $cmd; then\n    echo \"All tests passed!\" >> $GITHUB_STEP_SUMMARY\nelse\n  echo \"::error title=API tests ${{ matrix.envfiles.db }} ${{ matrix.envfiles.conf }}::Test execution failed\"\n  cat tests.out >> $GITHUB_STEP_SUMMARY\n  exit 1\nfi \n"
      - name: Generate metadata and upload test reports
        if: always() && steps.test_execution.outcome != 'skipped'
        id: metadata_report
        env:
          BASE_REF: ${{startsWith(github.event_name, 'pull_request') && github.base_ref || github.ref}}
          REPORT_NAME: ${{ github.repository }}_${{ github.run_id }}_${{ github.run_attempt }}-${{steps.test_execution.outputs.id}}
          METADATA_REPORT_PATH: /tmp/metadata.toml
        run: |
          # Generate metadata report
          echo "[metadata]
          repo = ${{ github.repository }}
          branch = ${{ github.ref }}
          commit = ${{ github.sha }}
          test_suite_version = $BASE_REF
          test_suite_name = ${{ github.job }}
          test_suite_run = ${{ github.run_id }}-${{ github.run_attempt }}
          db = ${{ matrix.envfiles.db }}
          conf = ${{ matrix.envfiles.config }}
          cache = ${{ matrix.envfiles.cache }}
          pump_compatibility = ${{ matrix.pump }}
          sink_compatibility = ${{ matrix.sink }}
          " > ${METADATA_REPORT_PATH}
          # Print metadata report
          if [[ "${{ runner.debug }}" == "1" ]]; then
            echo "::group::metadata report"
            cat ${METADATA_REPORT_PATH}
            echo "::endgroup::"
          fi
          #Upload xunit report
          aws s3 cp ${XUNIT_REPORT_PATH}  s3://assets.dev.tyk.technology/testreports/${REPORT_NAME#*/}.xml
          #Upload metadata report
          aws s3 cp ${METADATA_REPORT_PATH} s3://assets.dev.tyk.technology/testreports/${REPORT_NAME#*/}.metadata.toml
      - name: Docker logs for all components
        if: failure() && (steps.test_execution.outcome != 'success' || steps.env_up.outcome != 'success')
        working-directory: auto
        env:
          pull_policy: 'if_not_present'
          GH_TOKEN: ${{ secrets.ORG_GH_TOKEN }}
          TYK_DB_LICENSEKEY: ${{ secrets.DASH_LICENSE }}
          TYK_MDCB_LICENSE: ${{ secrets.MDCB_LICENSE }}
          ECR: ${{ steps.ecr.outputs.registry }}
        run: |
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f ${{ matrix.envfiles.db }}.yml -f ${{ matrix.envfiles.cache }}.yml --env-file versions.env --profile all logs | sort > ${{ github.workspace }}/docker-compose.log
          echo "::group::DockerLogs"
          cat ${{ github.workspace }}/docker-compose.log
          echo "::endgroup::"
      - name: Upload compose logs
        uses: actions/upload-artifact@v4
        if: failure() && (steps.test_execution.outcome != 'success' || steps.env_up.outcome != 'success')
        with:
          name: docker-compose-logs-${{ github.job }}-${{ matrix.envfiles.db }}-${{ matrix.envfiles.conf }}-${{ github.run_id }}
          path: ${{ github.workspace }}/docker-compose.log
          retention-days: 3
          overwrite: true
  test-controller-ui:
    runs-on: ubuntu-latest
    outputs:
      envfiles: ${{ steps.params.outputs.envfiles }}
      pump: ${{ steps.params.outputs.pump }}
      sink: ${{ steps.params.outputs.sink }}
    steps:
      - name: set params
        id: params
        shell: bash
        env:
          # startsWith covers pull_request_target too
          BASE_REF: ${{startsWith(github.event_name, 'pull_request') && github.base_ref || github.ref_name}}
          VARIATION: test
        run: |
          set -eo pipefail
          curl -s --retry 5 --retry-delay 10 --fail-with-body "http://tui.internal.dev.tyk.technology/v2/$VARIATION/tyk-ci/$BASE_REF/${{ github.event_name}}/ui.gho" | tee -a "$GITHUB_OUTPUT"
          [[ $VARIATION =~ test ]] && echo "::warning file=release.yml,line=100,col=5,endColumn=7::Using test variation"
  ui-tests:
    needs:
      - test-controller-ui
    runs-on: ubuntu-latest
    env:
      XUNIT_REPORT_PATH: ${{ github.workspace }}/tyk-analytics/tests/ui/playwright-report/results.xml
    permissions:
      id-token: write # This is required for requesting the Github JWT
      contents: read # This is required for actions/checkout
    strategy:
      fail-fast: false
      matrix:
        envfiles: ${{ fromJson(needs.test-controller-ui.outputs.envfiles) }}
        pump: ${{ fromJson(needs.test-controller-ui.outputs.pump) }}
        sink: ${{ fromJson(needs.test-controller-ui.outputs.sink) }}
        exclude:
          - pump: tykio/tyk-pump-docker-pub:v1.8
            sink: $ECR/tyk-sink:master
          - pump: $ECR/tyk-pump:master
            sink: tykio/tyk-mdcb-docker:v2.4
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::754489498669:role/ecr_rw_tyk
          role-session-name: cipush
          aws-region: eu-central-1
      - id: ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
      - name: Setup tmate session only in debug mode
        uses: mxschmitt/action-tmate@v3
        if: runner.debug == '1'
        with:
          detached: true
          limit-access-to-actor: true
          # Only ${{ github.actor }} has access
          # See https://github.com/mxschmitt/action-tmate#use-registered-public-ssh-keys
      - name: fetch env from tyk-ci
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release download --repo github.com/TykLabs/tyk-pro -p 'auto-env.tgz' -O env.tgz
          mkdir auto
          tar xzvf env.tgz -C auto
      - name: env up
        shell: bash
        working-directory: auto
        id: env_up
        env:
          pull_policy: 'if_not_present'
          GH_TOKEN: ${{ secrets.ORG_GH_TOKEN }}
          TYK_DB_LICENSEKEY: ${{ secrets.DASH_LICENSE }}
          TYK_MDCB_LICENSE: ${{ secrets.MDCB_LICENSE }}
          BASE_REF: ${{startsWith(github.event_name, 'pull_request') && github.base_ref || github.ref_name}}
        run: |
          match_tag=${{steps.ecr.outputs.registry}}/tyk-ci:$BASE_REF
          tags=($match_tag)
          docker run -q --rm -v ~/.docker/config.json:/root/.docker/config.json tykio/gromit policy match ${tags[0]} ${match_tag} 2>versions.env
          echo '# alfa and beta have to come after the override
          tyk_alfa_image=$tyk_image
          tyk_beta_image=$tyk_image
          ECR=${{steps.ecr.outputs.registry}}
          tyk_pump_image=${{matrix.pump}}
          tyk_sink_image=${{matrix.sink}}
          confs_dir=./pro-ha
          env_file=local-${{ matrix.envfiles.db }}.env' >> versions.env
          echo "::group::versions"
          cat versions.env
          echo "::endgroup::"
          # Add Tyk component config variations to $env_file
          cat confs/${{ matrix.envfiles.config }}.env >> local-${{ matrix.envfiles.db }}.env
          # bring up env, the project name is important
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f ${{ matrix.envfiles.db }}.yml -f ${{ matrix.envfiles.cache }}.yml --env-file versions.env --profile master-datacenter up --quiet-pull -d
          ./dash-bootstrap.sh http://localhost:3000
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f ${{ matrix.envfiles.db }}.yml -f ${{ matrix.envfiles.cache }}.yml --env-file versions.env --profile slave-datacenter up --quiet-pull -d
      - name: Install Node.js 18.16
        uses: actions/setup-node@v2.4.1
        with:
          node-version: "18.16"
      - name: Fix private module deps
        env:
          TOKEN: '${{ secrets.ORG_GH_TOKEN }}'
        run: "git config --global url.\"https://${TOKEN}@github.com\".insteadOf \"https://github.com\"                    \n"
      - name: Install test dependecies
        run: |
          npm ci
        working-directory: tyk-analytics/tests/ui
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium
        working-directory: tyk-analytics/tests/ui
      - name: Execute UI tests
        id: test_execution
        run: |
          # Generate report id
          echo "id=$(date +%s%N)" >> $GITHUB_OUTPUT
          npm run test -- --workers=3
        working-directory: tyk-analytics/tests/ui
        env:
          GW_URL: 'https://localhost:8080/'
          NODE_TLS_REJECT_UNAUTHORIZED: 0
          SLACK_AUTH_TOKEN: ${{ secrets.UI_SLACK_AUTH_TOKEN }}
          EVENT_TRIGGER: ${{ github.event_name }} (${{ github.actor }})
          JOB_RUN_ID: ${{ github.run_id }}
          JOB_NAME: tyk-analytics - ${{ github.ref }} ${{ github.event.head_commit.message }}
          RUN_ID: 'tyk-analytics/${{ github.run_id }}'
      - name: Generate metadata and upload test reports
        if: always() && steps.test_execution.outcome != 'skipped'
        id: metadata_report
        env:
          BASE_REF: ${{startsWith(github.event_name, 'pull_request') && github.base_ref || github.ref}}
          REPORT_NAME: ${{ github.repository }}_${{ github.run_id }}_${{ github.run_attempt }}-${{steps.test_execution.outputs.id}}
          METADATA_REPORT_PATH: /tmp/metadata.toml
        run: |
          # Generate metadata report
          echo "[metadata]
          repo = ${{ github.repository }}
          branch = ${{ github.ref }}
          commit = ${{ github.sha }}
          test_suite_version = $BASE_REF
          test_suite_name = ${{ github.job }}
          test_suite_run = ${{ github.run_id }}-${{ github.run_attempt }}
          db = ${{ matrix.envfiles.db }}
          conf = ${{ matrix.envfiles.config }}
          cache = ${{ matrix.envfiles.cache }}
          pump_compatibility = ${{ matrix.pump }}
          sink_compatibility = ${{ matrix.sink }}
          " > ${METADATA_REPORT_PATH}
          # Print metadata report
          if [[ "${{ runner.debug }}" == "1" ]]; then
            echo "::group::metadata report"
            cat ${METADATA_REPORT_PATH}
            echo "::endgroup::"
          fi
          #Upload xunit report
          aws s3 cp ${XUNIT_REPORT_PATH}  s3://assets.dev.tyk.technology/testreports/${REPORT_NAME#*/}.xml
          #Upload metadata report
          aws s3 cp ${METADATA_REPORT_PATH} s3://assets.dev.tyk.technology/testreports/${REPORT_NAME#*/}.metadata.toml
      - name: Docker logs for all components
        if: failure() && (steps.test_execution.outcome != 'success' || steps.env_up.outcome != 'success')
        working-directory: auto
        env:
          pull_policy: 'if_not_present'
          GH_TOKEN: ${{ secrets.ORG_GH_TOKEN }}
          TYK_DB_LICENSEKEY: ${{ secrets.DASH_LICENSE }}
          TYK_MDCB_LICENSE: ${{ secrets.MDCB_LICENSE }}
          ECR: ${{ steps.ecr.outputs.registry }}
        run: |
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f ${{ matrix.envfiles.db }}.yml -f ${{ matrix.envfiles.cache }}.yml --env-file versions.env --profile all logs | sort > ${{ github.workspace }}/docker-compose.log
          echo "::group::DockerLogs"
          cat ${{ github.workspace }}/docker-compose.log
          echo "::endgroup::"
      - name: Upload compose logs
        uses: actions/upload-artifact@v4
        if: failure() && (steps.test_execution.outcome != 'success' || steps.env_up.outcome != 'success')
        with:
          name: docker-compose-logs-${{ github.job }}-${{ matrix.envfiles.db }}-${{ matrix.envfiles.conf }}-${{ github.run_id }}
          path: ${{ github.workspace }}/docker-compose.log
          retention-days: 3
          overwrite: true
